#include<opencv2/core/core.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/opencv.hpp>
#include<iostream>
#include<io.h>
#include<fstream>
#include<string>
#include<vector>
using namespace std;
using namespace cv;

//读入文件夹下指定格式的所有文件，本程序是读取文件夹下所有jpg图片
void getFiles(string path, string file_format, vector<string>& files)
{
	intptr_t   hFile = 0;//intptr_t和uintptr_t是什么类型:typedef long int/ typedef unsigned long int
	struct _finddata_t fileinfo;
	string p, file_formatName;
	if (0 != strcmp(file_format.c_str(), ""))
	{
		file_formatName = "\\*." + file_format;
	}
	else
	{
		file_formatName = "\\*";
	}
	if ((hFile = _findfirst(p.assign(path).append(file_formatName).c_str(), &fileinfo)) != -1)//assign方法可以理解为先将原字符串清空，然后赋予新的值作替换。
	{
		do
		{
			files.push_back(p.assign(path).append("\\").append(fileinfo.name));
		} while (_findnext(hFile, &fileinfo) == 0);
		_findclose(hFile);
	}
}

int Horizontal_projection(const Mat& src, Mat& roiImg)
{
	//step1. 计算水平投影黑色点数量
	int w = src.cols;//图形宽
	int h = src.rows;//图形长
	vector<int> project_val_arry;//记录每行黑色数量
	int per_pixel_value;
	for (int j = 0; j < h; j++)//行
	{

		Mat j_im = src.row(j);//取第j行作为一个图像
		int num = w - countNonZero(j_im);//每行黑色点数量

		project_val_arry.push_back(num);
	}
	//显示
	if (1)
	{
		Mat hist_im(h, w, CV_8UC1, Scalar(255));
		for (int i = 0; i < h; i++)
		{
			for (int j = 0; j < project_val_arry[i]; j++)
			{

				hist_im.ptr<unsigned char>(i)[h - 1 - j] = 0;

			}
		}
		//imshow("project", hist_im);
	}
	//step2. 字符分割
	int startIndex = 0;
	int endIndex = 0;
	bool inBlock = false;//是否遍历到了字符区内
	for (int i = 0; i < h; ++i)
	{
		if (!inBlock && project_val_arry[i] != 0 && project_val_arry[i] > 10)//进入字符区了
		{
			inBlock = true;
			startIndex = i;
			//cout << "startIndex is " << startIndex << endl;
		}
		else if (project_val_arry[i] < 10 && inBlock)//进入空白区了
		{
			endIndex = i;
			inBlock = false;
		}
		if ((endIndex - startIndex) > 0.03*h) {
			roiImg = src(Rect(0, startIndex, w, endIndex + 1 - startIndex));
			//imshow("HImg", roiImg);
			break;
		}
	}
	return 0;
}
int vertical_projection(const Mat& src, vector<Mat>& roiList)
{
	//step1. 计算竖直投影黑色点数量
	int w = src.cols;//图形宽
	int h = src.rows;//图形长
	vector<int> project_val_arry;//记录每列黑色数量
	int per_pixel_value;

	for (int j = 0; j < w; j++)//列
	{

		Mat j_im = src.col(j);//取第j列作为一个图像 
		int num = h - countNonZero(j_im);//每列黑色点数量
		project_val_arry.push_back(num);
	}
	//显示
	if (1)
	{
		Mat hist_im(h, w, CV_8UC1, Scalar(255));
		for (int i = 0; i < w; i++)
		{
			for (int j = 0; j < project_val_arry[i]; j++)
			{
				hist_im.ptr<unsigned char>(h - 1 - j)[i] = 0;
			}
		}
		//imshow("project1", hist_im);
	}


	//step2. 字符分割



	int startIndex = 0;
	int endIndex = 0;
	bool inBlock = false;//是否遍历到了字符区内
	int num = 0;
	for (int i = 20; i < w; ++i)

	{

		if (!inBlock && project_val_arry[i] != 0)//进入字符区了

		{
			inBlock = true;
			startIndex = i;
			//cout << "startIndex is " << startIndex << endl;
		}

		else if (project_val_arry[i] == 0 && inBlock)//进入空白区了

		{

			endIndex = i;

			inBlock = false;
			if (num < 21)
			{
				Mat roiImg = src(Rect(startIndex, 0, endIndex + 1 - startIndex, h));

				roiList.push_back(roiImg);
				num++;
			}

		}
	}
	return 0;
}
//计算全局阈值
int DetectThreshold(Mat& src)
{
	uchar iThrehold;//阀值
	try
	{
		int height = src.cols;
		int width = src.rows;
		int step0 = src.step / sizeof(uchar);
		uchar *data0 = (uchar*)src.data;
		//cout << step0;
		int iDiffRec = 0;
		int F[256] = { 0 }; //直方图数组  
		int iTotalGray = 0;//灰度值和  
		int iTotalPixel = 0;//像素数和  
		uchar bt;//某点的像素值  
		uchar iNewThrehold;//新阀值
		uchar iMaxGrayValue = 0, iMinGrayValue = 255;//原图像中的最大灰度值和最小灰度值  
		uchar iMeanGrayValue1, iMeanGrayValue2;
		//获取(i,j)的值，存于直方图数组F  
		for (int i = 0; i < width; i++)
		{
			for (int j = 0; j < height; j++)
			{
				bt = data0[i*step0 + j];
				if (bt < iMinGrayValue)
					iMinGrayValue = bt;
				if (bt > iMaxGrayValue)
					iMaxGrayValue = bt;
				F[bt]++;
			}
		}
		iThrehold = 0;
		iNewThrehold = (iMinGrayValue + iMaxGrayValue) / 2;//初始阀值  
		iDiffRec = iMaxGrayValue - iMinGrayValue;
		for (int a = 0; (abs(iThrehold - iNewThrehold) > 0.5); a++)//迭代中止条件  
		{
			iThrehold = iNewThrehold;
			//小于当前阀值部分的平均灰度值  
			for (int i = iMinGrayValue; i < iThrehold; i++)
			{
				iTotalGray += F[i] * i;//F[]存储图像信息  
				iTotalPixel += F[i];
			}
			iMeanGrayValue1 = (uchar)(iTotalGray / iTotalPixel);
			//大于当前阀值部分的平均灰度值  
			iTotalPixel = 0;
			iTotalGray = 0;
			for (int j = iThrehold + 1; j < iMaxGrayValue; j++)
			{
				iTotalGray += F[j] * j;//F[]存储图像信息  
				iTotalPixel += F[j];
			}
			iMeanGrayValue2 = (uchar)(iTotalGray / iTotalPixel);

			iNewThrehold = (iMeanGrayValue2 + iMeanGrayValue1) / 2; //新阀值  
			iDiffRec = abs(iMeanGrayValue2 - iMeanGrayValue1);
		}
	}
	catch (cv::Exception e)
	{
	}

	return iThrehold;
}

//求切割下来的数字和模板的像素差，平方差法
//int PixelDifference(Mat src1, Mat src2)
//{
//	int num = 0;
//	for (int i = 0; i < src1.rows; i++)
//	{
//		for (int j = 0; j < src1.cols; j++)
//		{
//			if (src1.at<unsigned char>(i, j) >= src2.at<unsigned char>(i, j))
//			{
//				num += src1.at<unsigned char>(i, j) - src2.at<unsigned char>(i, j);
//			}
//			else
//			{
//				num += src2.at<unsigned char>(i, j) - src1.at<unsigned char>(i, j);
//			}
//		}
//	}
//	return num;
//}
int PixelDifference(Mat src1, Mat src2)
{
	int num = 0;
	for (int i = 0; i < src1.rows; i++)
	{
		for (int j = 0; j < src1.cols; j++)
		{
			if (src1.at<unsigned char>(i, j) == 255)
				src1.at<unsigned char>(i, j) = 1;
			if (src2.at<unsigned char>(i, j) == 255)
				src2.at<unsigned char>(i, j) = 1;
				num +=sqrt( (src2.at<unsigned char>(i, j) - src1.at<unsigned char>(i, j))*(src2.at<unsigned char>(i, j) - src1.at<unsigned char>(i, j)));
			
		}
	}
	return num;
}
//求一个图片的最小外接矩形（去除图片中白色部分）
int getxmin(Mat& src)
{
	int xmin = src.rows;
	for (int j = 0; j < src.cols; j++)
	{
		for (int i = 0; i < src.rows; i++)
		{
			if (src.at<unsigned char>(i, j) == 0)
			{
				if (i <= xmin)
				{
					xmin = i;
				}
			}
		}
	}
	return xmin;
};
int getxmax(Mat& src)
{
	int xmax = 0;
	for (int j = 0; j < src.cols; j++)
	{
		for (int i = src.rows - 1; i >= 0; i--)
		{
			if (src.at<unsigned char>(i, j) == 0)
			{
				if (i >= xmax)
				{
					xmax = i;
				}
			}
		}
	}
	return xmax;
};
int getymin(Mat& src)
{
	int ymin = src.cols;
	for (int i = 0; i < src.rows; i++)
	{
		for (int j = 0; j < src.cols; j++)
		{
			if (src.at<unsigned char>(i, j) == 0)
			{
				if (j <= ymin)
				{
					ymin = j;
				}
			}
		}
	}
	return ymin;
};
int getymax(Mat& src)
{
	int ymax = 0;
	for (int i = 0; i < src.rows; i++)
	{
		for (int j = src.cols - 1; j >= 0; j--)
		{

			if (src.at<unsigned char>(i, j) == 0)
			{
				if (j >= ymax)
				{
					ymax = j;
				}
			}
		}
	}
	return ymax;
};


struct node {
	int cha;char index;
};
bool com(node a, node b) {
	return a.cha < b.cha;
}

vector<node>difference;

//比较和所有模板的像素差，返回差距最小的
char recognize(Mat srctest) {
	difference.clear();
	//获取外接矩形，去除多余白边
	int xmin = getxmin(srctest);
	int xmax = getxmax(srctest);
	int ymin = getymin(srctest);
	int ymax = getymax(srctest);
	Mat A = srctest(Range(xmin, xmax + 1), Range(ymin, ymax));
	//Mat A = srctest;
	resize(A, A, Size(24, 36));
	threshold(A, A, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	//对模板数字进行尺寸统一，二值化，有些由于多种字体，一种数字会有多个模板
	Mat src0 = imread("0.jpg", 0);
	if (src0.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src0, src0, Size(24, 36));
	threshold(src0, src0, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src1 = imread("1.jpg", 0);
	if (src1.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src1, src1, Size(24, 36));
	threshold(src1, src1, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src2 = imread("2.jpg", 0);
	if (src2.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src2, src2, Size(24, 36));
	threshold(src2, src2, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src3 = imread("3.jpg", 0);
	if (src3.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src3, src3, Size(24, 36));
	threshold(src3, src3, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src4 = imread("4.jpg", 0);
	if (src4.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src4, src4, Size(24, 36));
	threshold(src4, src4, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);	

	Mat src6 = imread("6.jpg", 0);
	if (src6.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src6, src6, Size(24, 36));
	threshold(src6, src6, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src7 = imread("7.jpg", 0);
	if (src7.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src7, src7, Size(24, 36));
	threshold(src7, src7, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src8 = imread("8.jpg", 0);
	if (src8.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src8, src8, Size(24, 36));
	threshold(src8, src8, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src_006 = imread("006.jpg", 0);
	if (src_006.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src_006, src_006, Size(24, 36));
	threshold(src_006, src_006, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src_007 = imread("007.jpg", 0);
	if (src_007.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src_007, src_007, Size(24, 36));
	threshold(src_007, src_007, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src_04 = imread("04.jpg", 0);
	if (src_04.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src_04, src_04, Size(24, 36));
	threshold(src_04, src_04, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src_05 = imread("05.jpg", 0);
	if (src_05.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src_05, src_05, Size(24, 36));
	threshold(src_05, src_05, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src_09 = imread("09.jpg", 0);
	if (src_09.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src_09, src_09, Size(24, 36));
	threshold(src_09, src_09, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src_X = imread("X.jpg", 0);
	if (src_X.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src_X, src_X, Size(24, 36));
	threshold(src_X, src_X, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src3p = imread("3p.jpg", 0);
	if (src3p.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src3p, src3p, Size(24, 36));
	threshold(src3p, src3p, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src5p = imread("5p.jpg", 0);
	if (src5p.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src5p, src5p, Size(24, 36));
	threshold(src5p, src5p, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src8p = imread("8p.jpg", 0);
	if (src8p.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src8p, src8p, Size(24, 36));
	threshold(src8p, src8p, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	Mat src9p = imread("9p.jpg", 0);
	if (src9p.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	resize(src9p, src9p, Size(24, 36));
	threshold(src9p, src9p, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);

	//计算待识别图片与各个模板图片的像素差，并存到vector中
	node a_0;
	a_0.cha = PixelDifference(A, src0);
	a_0.index = '0';
	difference.push_back(a_0);

	node a_1;
	a_1.cha = PixelDifference(A, src1);
	a_1.index = '1';
	difference.push_back(a_1);

	node a_2;
	a_2.cha = PixelDifference(A, src2);
	a_2.index = '2';
	difference.push_back(a_2);

	node a_3;
	a_3.cha = PixelDifference(A, src3);
	a_3.index = '3';
	difference.push_back(a_3);

	node a_4;
	a_4.cha = PixelDifference(A, src4);
	a_4.index = '4';
	difference.push_back(a_4);

	node a_6;
	a_6.cha = PixelDifference(A, src6);
	a_6.index = '6';
	difference.push_back(a_6);

	node a_7;
	a_7.cha = PixelDifference(A, src7);
	a_7.index = '7';
	difference.push_back(a_7);

	node a_8;
	a_8.cha = PixelDifference(A, src8);
	a_8.index = '8';
	difference.push_back(a_8);

	node a_006;
	a_006.cha = PixelDifference(A, src_006);
	a_006.index = '6';
	difference.push_back(a_006);

	node a_007;
	a_007.cha = PixelDifference(A, src_007);
	a_007.index = '7';
	difference.push_back(a_007);

	node a_04;
	a_04.cha = PixelDifference(A, src_04);
	a_04.index = '4';
	difference.push_back(a_04);

	node a_05;
	a_05.cha = PixelDifference(A, src_05);
	a_05.index = '5';
	difference.push_back(a_05);

	node a_09;
	a_09.cha = PixelDifference(A, src_09);
	a_09.index = '9';
	difference.push_back(a_09);

	node a_X;
	a_X.cha = PixelDifference(A, src_X);
	a_X.index = 'X';
	difference.push_back(a_X);

	node a_3p;
	a_3p.cha = PixelDifference(A, src3p);
	a_3p.index = '3';
	difference.push_back(a_3p);

	node a_5p;
	a_5p.cha = PixelDifference(A, src5p);
	a_5p.index = '5';
	difference.push_back(a_5p);

	node a_8p;
	a_8p.cha = PixelDifference(A, src8p);
	a_8p.index = '8';
	difference.push_back(a_8p);

	node a_9p;
	a_9p.cha = PixelDifference(A, src9p);
	a_9p.index = '9';
	difference.push_back(a_9p);

	//把所有的像素差排序，取差距最小的。
	sort(difference.begin(), difference.end(), com);
	return difference[0].index;
}

//划线法为辅助进一步识别数字
int numberx(Mat srctest) {
	int ok=0;
	int xmin = getxmin(srctest);
	int xmax = getxmax(srctest);
	int ymin = getymin(srctest);
	int ymax = getymax(srctest);
	Mat A = srctest(Range(xmin, xmax + 1), Range(ymin, ymax));//获取外接矩形去除多余白边
	resize(A, A, Size(24, 36));//扩大尺寸
	threshold(A, A, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);//二值化处理
	for (int i = 23; i < 24; i++)//这里是统计纵坐标2/3处的像素值多少
	{
		for (int j = 0; j < A.cols; j++)
		{
			if (A.at<unsigned char>(i, j) == 0)
			{
				ok++;//黑色像素数量统计
			}
		}
	}
	return ok;
}




int main()
{
	int num = 0;//识别正确个数
	int num_1 = 0;//识别正确字符数
	int num_2 = 0;//总的字符数

	//读取所有测试数据（读取一个文件中所有的jpg文件）
	string filePath = "C:\\Users\\qa\\Desktop\\二级项目\\2018级课程实践--项目测试数据集"; //正样本路径
	//string filePath = "C:\\Users\\qa\\Desktop\\二级项目\\ceshi"; //正样本路径
	vector<string> files;
	string file_format = "jpg";
	getFiles(filePath, file_format, files);
	
	//读取所有的文件的名字
	vector<String> tem;
	string path = "C:/Users/qa/Desktop/二级项目/2018级课程实践--项目测试数据集/";
	//string path = "C:/Users/qa/Desktop/二级项目/ceshi/";
	cv::glob(path + "*.jpg", tem);
	int number = files.size();//文件数量
	vector<int>gang;//用于记录-的位置

	//cout << number << endl;
	for (int rd= 0; rd < number; rd++)
	{
		//读取正确的图片名字
		gang.clear();
		string correct = "";
		string test = "";
		string test1 = "";
		std::string c = tem[rd];
		if (c[path.length()]!='I') {
			for (int i = path.length(); i < c.size() - 4; i++) {
				correct += c[i];
			}
		}
		else {
			for (int i = path.length()+5; i < c.size() - 4; i++) {
				correct += c[i];
			}
		}
		//记录正确的中的“-”的位置
		for (int x = 0; x < correct.size(); x++)
			if (correct[x] == '-')
				gang.push_back(x);

		//读取待测试图片
		Mat src = imread(files[rd]);
		Mat dst;
		//图片预处理，灰度化-去噪（中值滤波）-二值化（找局部阈值）
		cvtColor(src, src, COLOR_RGB2GRAY);
		medianBlur(src, src, 3);
		int zz = DetectThreshold(src);//计算全局阈值（部分图用全局阈值效果话，部分图用局部阈值效果好）
		threshold(src, dst, 0, 255, CV_THRESH_OTSU);
		 
		//切割字符
		Mat HImg;
		Horizontal_projection(dst, HImg);//水平投影
		vector<Mat> char_im_vec;
		vertical_projection(HImg, char_im_vec);//垂直投影
		int k1= char_im_vec.size();//切割下来的字符数量

		//对右边有黑点的图片做一个特殊处理
		if (k1 > 21)
			k1 = 21;

		//遍历切割下来的数字
		for (int i = 4; i < k1; i++)
		{
			
			//判断是否该字符是不是-
			for (int y = 0; y < gang.size(); y++)
			{
				if (i-4==gang[y])
				{
					test += '-';
					i++;
				    break;
				}
			}

			char c;
			try { c = recognize(char_im_vec[i]);
			//if (c == '8') {
			//	//imshow("char_im_vec[i]", char_im_vec[i]);
			//	waitKey(1000);
			//	int xmin = getxmin(char_im_vec[i]);
			//	int xmax = getxmax(char_im_vec[i]);
			//	int ymin = getymin(char_im_vec[i]);
			//	int ymax = getymax(char_im_vec[i]);
			//	Mat A = char_im_vec[i](Range(xmin, xmax + 1), Range(ymin, ymax));//获取外接矩形去除多余白边
			//	resize(A, A, Size(24, 36));//扩大尺寸
			//	threshold(A, A, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);//二值化处理
			//	int p = numberx(A);
			//	//cout << p << endl;
			//	if (p <= 7) { c = '3'; }
			//	else { c = '8'; }
			//}
			if (c == 'X'&&i != k1 - 1)
				c = difference[1].index;
			test += c;
			}
			catch (exception e) { i++; }
			//因为8与3容易识别混淆，加一个划线区分8与3
			
		}

		//如果局部阈值的方法没有识别正确，再用全局阈值识别一次
		if (test != correct) {
			test1= "";
			threshold(src, dst, zz, 255, CV_THRESH_BINARY);//全局阈值二值化
			Horizontal_projection(dst, HImg);
			vector<Mat> char_im_vec;
			vertical_projection(HImg, char_im_vec);//输出直方图
			int k2 = char_im_vec.size();
			if (k2 > 21)
				k2= 21;
			//全局阈值二值化处理的图片更黑，可能造成部分数字变黑模糊不能分辨，就要先判断，分割下来的图片的数量是否正确
			if (k2 == k1) {
				for (int i = 4; i < k2; i++)
				{
					for (int y = 0; y < gang.size(); y++)
					{
						if (i - 4 == gang[y])
						{
							test1+= '-';
							i++;
							break;
						}
					}
					char c;
					try { c = recognize(char_im_vec[i]);
					//if (c == '8') {
					//	imshow("char_im_vec[i]", char_im_vec[i]);
					//	waitKey(1000);
					//	int xmin = getxmin(char_im_vec[i]);
					//	int xmax = getxmax(char_im_vec[i]);
					//	int ymin = getymin(char_im_vec[i]);
					//	int ymax = getymax(char_im_vec[i]);
					//	Mat A = char_im_vec[i](Range(xmin, xmax + 1), Range(ymin, ymax));//获取外接矩形去除多余白边
					//	resize(A, A, Size(24, 36));//扩大尺寸
					//	threshold(A, A, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);//二值化处理
					//	int p = numberx(A);
					//	cout << p << endl;
					//	if (p <= 10) { c = '3'; }
					//	else { c = '8'; }
					//}
					if (c == 'X'&&i != k2 - 1)
						c = difference[1].index;
					test1 += c;
					}
					catch (exception e) { i++; }
					
				}
				//判断两种方法哪种识别更好，取最好的
				int n_1 = 0; int n_2 = 0;
				for (int z = 0; z < correct.size(); z++)
				{
					if (z >= test.size()||z>= test1.size())
						break;
					if (correct[z] == '-' || correct[z] == 'X')
						continue;
					if (correct[z] == test[z])
						n_1++;
					if (correct[z] == test1[z])
						n_2++;
				}
				if (n_2 > n_1) {
					test = test1;
					
				}
			}
		}

		//输出结果
		string s, x;
		s = "待识别样本: " + correct;
		x = "识别结果: " + test;
		cout << setiosflags(ios::left)<<setw(30)<<s << setiosflags(ios::left) << setw(20)<<x;
		if (correct == test)
		{
			cout << "√";
				cout << endl;
			cout << "识别正确  ";
			num++;
		}
		else
		{
			cout << "×";
			cout << endl;
			cout << "识别错误  ";
		}
		//统计正确识别字符数
		for (int z = 0; z < correct.size(); z++)
		{
			if (z >= test.size())
				break;
			if (correct[z] == '-'|| correct[z]=='X')
				continue;
			if (correct[z] == test[z])
				num_2++;
		}
		for (int z = 0; z < correct.size(); z++)
		{
			if (correct[z] != '-')
				num_1++;
		}
		printf("当前累计识别正确个数：%d", num);
		cout << endl;
	}

	//输出正确率以及准确率
	double accuracy = (double)num / (double)tem.size();
	double precision_rate =(double) num_2 /(double) num_1;
	cout << "--------------------------------------" << endl;
	printf("总共%d个测试样本，识别正确个数为%d\n", tem.size(), num);
	printf("识别正确率为：%.3f\n", accuracy);
	printf("识别准确率为：%.3f\n", precision_rate);
	return 0;
}
	
